{"/home/travis/build/npmtest/node-npmtest-minifier/test.js":"/* istanbul instrument in package npmtest_minifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-minifier/lib.npmtest_minifier.js":"/* istanbul instrument in package npmtest_minifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_minifier = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_minifier = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-minifier/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-minifier && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_minifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_minifier\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_minifier.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_minifier.rollup.js'] =\n            local.assetsDict['/assets.npmtest_minifier.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_minifier.__dirname + '/lib.npmtest_minifier.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-minifier/node_modules/minifier/index.js":"#!/usr/bin/env node\n\nvar program = require('commander')\nvar minifier = require('./src/minify')\n\nif(require.main === module) {\n\tvar skip = []\n\tprogram\n\t\t.version(require('./package.json').version)\n\t\t.option('-o, --output [file]', 'The output file')\n\t\t.option('-t, --template [template]', 'A template for building the output file')\n\t\t.option('-c, --clean', 'Deletes any files that resembles the template')\n\t\t.option('-C, --clean-only', 'Same as `--clean`, but without minifying the files afterwards')\n\t\t.option('-s, --skip <path-component>', 'Skip any files that contains this in the path')\n\t\t.option('--no-comments', 'Remove license-style comments')\n\t\t.usage('[--output file] path/to/input [...path/to/other/input]')\n\n\t\t.on('skip', function(path) {\n\t\t\tskip.push(path)\n\t\t})\n\n\t\t.parse(process.argv)\n\n\tvar inputs = program.args\n\tvar input\n\tif(inputs.length == 1) {\n\t\tinput = inputs[0]\n\t}\n\n\tif(inputs.length == 0) {\n\t\tprogram.parse(['bla', 'bla', '--help'])\n\t\tprocess.exit()\n\t}\n\n\tif(skip.length) program.skip = skip\n\n\tprogram.noComments = program.comments === false\n\n\tminifier.on('error', function(msg) {\n\t\tconsole.log(msg)\n\t\tprocess.exit(1)\n\t})\n\tprogram.uglify = {\n\t\toutput: {\n\t\t\tsemicolons:false,\n\t\t},\n\t}\n\tminifier.minify(input || inputs, program)\n\n\tif(program.cleanOnly) {\n\t\treturn console.log('Minified files cleaned')\n\t}\n\n\tconsole.log('Minification complete')\n}\n\nmodule.exports = minifier\n","/home/travis/build/npmtest/node-npmtest-minifier/node_modules/minifier/src/css.js":"module.exports =\n\t{ parse: parse\n\t}\n\nvar fs = require('fs')\nvar path = require('path')\nvar format = require('util').format\nvar utils = require('./utils')\nvar stringImportMatcher = /@import [\"'](.+)[\"'];/g\nvar importMatcher = /@import +(url\\()?([^()]+)\\)? *;/g\nvar urlMatcher = /url\\([\"']?([^\"'()]+)[\"']?\\)/g\nvar absoluteUrl = /^([a-zA-Z]:\\/)?\\//\nvar dataUrl = /^data:/\n\nfunction parse(file, absRoot, minifier) {\n\tif(!minifier) minifier = function(content) { return content }\n\tvar root = path.dirname(file)\n\tvar absRoot = absRoot || ''\n\tvar relRoot = path.relative(absRoot, root)\n\tvar content = minifier(utils.stripUTF8ByteOrder(fs.readFileSync(file, 'utf8')))\n\n\treturn content\n\t\t.replace(stringImportMatcher, function(match, url) {\n\t\t\treturn format('@import url(%s);', url)\n\t\t})\n\t\t.replace(urlMatcher, function(match, url) {\n\t\t\turl = url.trim()\n\t\t\tif(!url.match(dataUrl) && !url.match(absoluteUrl)) {\n\t\t\t\turl = path.join(relRoot, url).replace(/\\\\/g, '/')\n\t\t\t}\n\t\t\treturn format('url(%s)', url)\n\t\t})\n\t\t.replace(importMatcher, function(match, junk, file) {\n\t\t\tif(!file.match(absoluteUrl)) {\n\t\t\t\tfile = path.join(absRoot, file)\n\t\t\t}\n\t\t\tvar parsedFile = parse(file, absRoot)\n\t\t\treturn parsedFile +'\\n'\n\t\t})\n\t\t.trim()\n}\n","/home/travis/build/npmtest/node-npmtest-minifier/node_modules/minifier/src/utils.js":"module.exports =\n\t{ stripUTF8ByteOrder: stripUTF8ByteOrder\n\t, generateOutputName: generateOutputName\n\t}\n\nvar format = require('util').format\nvar hogan = require('hogan.js')\nvar digest = require('crypto').createHash\nvar path = require('path')\n\nfunction generateOutputName(input, options) {\n\tif(!options) options = {}\n\tvar extractedInput =\n\t\t{ md5: generate.bind(null, 'md5')\n\t\t, sha: generate.bind(null, 'sha256')\n\t\t}\n\tvar dir = path.dirname(input)\n\tpath.basename(input).replace(/^(.*)\\.([^.]+)$/, function(match, file, ext) {\n\t\textractedInput.ext = ext\n\t\textractedInput.filename = file\n\t\treturn ''\n\t})\n\n\tvar output = hogan.compile(options.template || '{{filename}}.min.{{ext}}').render(extractedInput)\n\n\toutput = path.join(dir, output)\n\n\tif(options.regex) return new RegExp(output.replace(/\\.([^*])/g, '\\\\.$1'))\n\treturn output\n\n\tfunction generate(algorithm) {\n\t\tif(options.regex) return '.*'\n\t\tif(options.glob) return '*'\n\t\tif(!options.content) throw new Error('Content is required for producing ' + algorithm)\n\t\tvar digester = digest(algorithm)\n\t\tdigester.update(options.content, 'utf8')\n\t\treturn digester.digest('hex')\n\t}\n}\n\nfunction stripUTF8ByteOrder(data) {\n\tvar content = data.toString()\n\tif(content[0] === '\\uFEFF') {\n\t\tcontent = content.substring(1)\n\t}\n\treturn content\n}\n","/home/travis/build/npmtest/node-npmtest-minifier/node_modules/minifier/src/minify.js":"var fs = require('fs')\nvar path = require('path')\nvar fmerge = require('fmerge')\nvar format = require('util').format\nvar sqwish = require('sqwish')\nvar uglify = require('uglify-js')\nvar stripUTF8ByteOrder = require('./utils').stripUTF8ByteOrder\nvar generateOutput = require('./utils').generateOutputName\nvar glob = require('glob')\nvar cssParser = require('css-resolve-import')\n\nvar EventEmitter = require('events').EventEmitter\nvar obj = new EventEmitter()\n\nobj.minify = minify\nobj.generateOutputName = generateOutput\n\nmodule.exports = obj\n\nfunction minify(input, options) {\n\toptions = fmerge({}, options)\n\n\tvar output\n\tvar template\n\n\tif(!input || (Array.isArray(input) && input.length == 0)) {\n\t\tobj.emit('error', new Error('The input is required'))\n\t}\n\n\tif(options.cleanOnly) {\n\t\toptions.clean = true\n\t}\n\toutput = options.output\n\ttemplate = options.template\n\n\tif(output && template) {\n\t\treturn obj.emit(\n\t\t\t  'error'\n\t\t\t,   new Error('It does not make sense to provide both --output and '\n\t\t\t  + '--template options. Please choose one.')\n\t\t)\n\t}\n\n\tif(!Array.isArray(input) && fs.statSync(input).isDirectory()) {\n\t\tif(output) {\n\t\t\treturn obj.emit('error',\n\t\t\t\tnew Error('You cannot use `output` option against a directory'))\n\t\t}\n\t\tif(options.clean) {\n\t\t\tclean(input, template || '{{filename}}.min.{{ext}}')\n\t\t}\n\t\tif(options.cleanOnly) {\n\t\t\treturn\n\t\t}\n\n\t\tvar files = glob.sync(path.join(input, '**/*.js'))\n\t\t\t.concat(\n\t\t\t\tglob.sync(path.join(input, '**/*.css'))\n\t\t\t)\n\t\tif(options.skip) {\n\t\t\tfiles = files.filter(function(file) {\n\t\t\t\treturn !options.skip.some(function(filter) {\n\t\t\t\t\treturn ~file.indexOf(filter)\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t\tfiles.every(x => handleInputs([x]))\n\n\t\treturn\n\t}\n\n\tvar inputs = Array.isArray(input) ? input : [input]\n\n\tif(options.clean) {\n\t\tif(template) {\n\t\t\tclean(path.dirname(inputs[0]), template)\n\t\t} else if(fs.existsSync(output)) {\n\t\t\tfs.unlinkSync(output)\n\t\t}\n\t}\n\n\tif(options.cleanOnly) {\n\t\treturn\n\t}\n\n\thandleInputs(inputs)\n\n\tfunction handleInputs(inputs) {\n\t\tvar extensionRegex = /(\\.js|css)$/\n\n\t\tvar usedExtensions = inputs\n\t\t\t.map(function(i) { return i.match(extensionRegex) })\n\t\t\t.filter(function(i) { return i != null })\n\t\t\t.map(function(i) { return i[1] })\n\t\t\t.filter(function(ext, idx, arr) { return arr.indexOf(ext) == idx })\n\n\t\tif(usedExtensions.length > 1) {\n\t\t\tobj.emit('error', new Error('Please only use one type of extension per run'))\n\t\t\treturn false\n\t\t} else if(usedExtensions.length == 0 || usedExtensions[0].match(extensionRegex) == null) {\n\t\t\tobj.emit('error', new Error('Please reference files with the extension as either .js or .css'))\n\t\t\treturn false\n\t\t}\n\n\t\tvar jsFiles = inputs.filter(x => x.endsWith('.js'))\n\t\tvar cssFiles = inputs.filter(x => x.endsWith('.css'))\n\t\tif(jsFiles.length > 0) {\n\t\t\tjs(jsFiles)\n\t\t}\n\t\tif(cssFiles.length > 0) {\n\t\t\tcss(cssFiles)\n\t\t}\n\t\treturn true\n\t}\n\n\tfunction js(inputs) {\n\t\tvar max = inputs.map(function(input) {\n\t\t\treturn stripUTF8ByteOrder(fs.readFileSync(input, 'utf8'))\n\t\t}).join(';\\n')\n\n\t\tvar comment = firstComment(max)\n\t\tvar min = uglify.minify(max, fmerge(options.uglify, { fromString: true })).code\n\t\tvar opts = { content: min, template: template }\n\t\tvar renderedOutput = output || generateOutput(inputs[0], opts)\n\n\t\tif(comment) {\n\t\t\tmin = comment +'\\n' + min\n\t\t}\n\n\t\tfs.writeFileSync(renderedOutput, min)\n\t}\n\n\tfunction css(inputs) {\n\t\tvar inDir = path.dirname(inputs[0])\n\t\tvar outDir = path.dirname(output || inputs[0])\n\t\tvar root = path.join(inDir, path.relative(inDir, outDir))\n\t\tvar min = inputs.map(input => cssParser(input, root, function(max) {\n\t\t\tvar max = stripUTF8ByteOrder(max)\n\t\t\tvar comment = firstComment(max)\n\t\t\tvar min = sqwish.minify(max, false)\n\n\t\t\tif(comment) {\n\t\t\t\tmin = comment + '\\n' + min\n\t\t\t}\n\n\t\t\treturn min\n\t\t})).join('\\n')\n\t\tvar opts = { content: min, template: template }\n\t\tvar renderedOutput = output || generateOutput(inputs[0], opts)\n\n\t\tfs.writeFileSync(renderedOutput, min)\n\t}\n\n\tfunction clean(dir, template) {\n\t\ttemplate = template.replace(/{{[^}]*}}/g, '*')\n\t\tglob.sync(path.join(dir, '**', template)).forEach(function(file) {\n\t\t\tfs.unlinkSync(file)\n\t\t})\n\t}\n\n\tfunction firstComment(content) {\n\t\tif(options.noComments) return null\n\t\tcontent = content.trim()\n\t\tif(content[0] == '/' && content[1] == '*') {\n\t\t\treturn content.substring(0, content.indexOf('*/')+2)\n\t\t}\n\t\tif(content[0] == '/' && content[1] == '/') {\n\t\t\tvar lines = content.split(/[\\r\\n]{1,2}/g)\n\t\t\tcontent = lines[0]\n\t\t\tfor(var i = 1; i < lines.length; i++) {\n\t\t\t\tvar line = lines[i]\n\t\t\t\tif(line[0] == '/' && line[1] == '/') {\n\t\t\t\t\tcontent += '\\n' + line\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn content\n\t\t}\n\t\treturn null\n\t}\n}\n"}